/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'jacoco'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'

repositories {
    // Use Maven Central for resolving dependencies.
    gradlePluginPortal()
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.0.1-jre'

    implementation 'info.picocli:picocli:4.7.0'

    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.14.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'

    implementation 'org.eluder.coveralls:coveralls-maven-plugin:4.3.0'
}

shadowJar {
    archiveBaseName.set('beacher')
    archiveClassifier.set('')
    archiveVersion.set('1.0.0')
    minimize()
}

jar {
    manifest{
        attributes(
                "Main-Class": "com.github.tamadalab.beacher.Example",
                "Class-Path": configurations.compileClasspath.files.collect { it.getName() }.join(' ')
        )
    }
}

task copyFile(type: Copy){
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from configurations.compileClasspath
    into "$buildDir/libs"
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport

    // jacoco {
    //     destinationFile = layout.buildDirectory.file('jacoco/jacocoTest.exec').get().asFile
    //     classDumpDir = layout.buildDirectory.dir('jacoco/classpathdumps').get().asFile
    // }

    jacoco {
        enabled = true
        destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
        includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
    applyTo run
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}

tasks.register('applicationCodeCoverageReport', JacocoReport) {
    executionData run
    sourceSets sourceSets.main
}

application {
    // Define the main class for the application.
    mainClass = 'com.github.tamadalab.beacher.Example'
}

build.finalizedBy copyFile